
Bienenlöter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000116  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000116  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  000001aa  2**0
                  ALLOC
  3 .noinit       00000000  00800063  00800063  000001aa  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  000001aa  2**0
                  CONTENTS
  5 .debug_aranges 00000014  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000004b  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000010d  00000000  00000000  00000209  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000d3  00000000  00000000  00000316  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000015b  00000000  00000000  000003e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000ea  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0d c0       	rjmp	.+26     	; 0x1c
   2:	25 c0       	rjmp	.+74     	; 0x4e
   4:	24 c0       	rjmp	.+72     	; 0x4e
   6:	23 c0       	rjmp	.+70     	; 0x4e
   8:	23 c0       	rjmp	.+70     	; 0x50
   a:	21 c0       	rjmp	.+66     	; 0x4e
   c:	20 c0       	rjmp	.+64     	; 0x4e
   e:	1f c0       	rjmp	.+62     	; 0x4e
  10:	1e c0       	rjmp	.+60     	; 0x4e
  12:	1d c0       	rjmp	.+58     	; 0x4e
  14:	1c c0       	rjmp	.+56     	; 0x4e
  16:	1b c0       	rjmp	.+54     	; 0x4e
  18:	1a c0       	rjmp	.+52     	; 0x4e
  1a:	19 c0       	rjmp	.+50     	; 0x4e

0000001c <__ctors_end>:
  1c:	11 24       	eor	r1, r1
  1e:	1f be       	out	0x3f, r1	; 63
  20:	cf ed       	ldi	r28, 0xDF	; 223
  22:	cd bf       	out	0x3d, r28	; 61

00000024 <__do_copy_data>:
  24:	10 e0       	ldi	r17, 0x00	; 0
  26:	a0 e6       	ldi	r26, 0x60	; 96
  28:	b0 e0       	ldi	r27, 0x00	; 0
  2a:	e6 e1       	ldi	r30, 0x16	; 22
  2c:	f1 e0       	ldi	r31, 0x01	; 1
  2e:	03 c0       	rjmp	.+6      	; 0x36

00000030 <.do_copy_data_loop>:
  30:	c8 95       	lpm
  32:	31 96       	adiw	r30, 0x01	; 1
  34:	0d 92       	st	X+, r0

00000036 <.do_copy_data_start>:
  36:	a0 36       	cpi	r26, 0x60	; 96
  38:	b1 07       	cpc	r27, r17
  3a:	d1 f7       	brne	.-12     	; 0x30

0000003c <__do_clear_bss>:
  3c:	10 e0       	ldi	r17, 0x00	; 0
  3e:	a0 e6       	ldi	r26, 0x60	; 96
  40:	b0 e0       	ldi	r27, 0x00	; 0
  42:	01 c0       	rjmp	.+2      	; 0x46

00000044 <.do_clear_bss_loop>:
  44:	1d 92       	st	X+, r1

00000046 <.do_clear_bss_start>:
  46:	a3 36       	cpi	r26, 0x63	; 99
  48:	b1 07       	cpc	r27, r17
  4a:	e1 f7       	brne	.-8      	; 0x44
  4c:	5c c0       	rjmp	.+184    	; 0x106

0000004e <__bad_interrupt>:
  4e:	d8 cf       	rjmp	.-80     	; 0x0

00000050 <__vector_4>:
volatile uint16_t pwm; /* Note [1] */
volatile uint8_t direction;

SIGNAL (SIG_OUTPUT_COMPARE1A/*SIG_OVERFLOW1*/) /* Note [2] */
{
  50:	1f 92       	push	r1
  52:	0f 92       	push	r0
  54:	0f b6       	in	r0, 0x3f	; 63
  56:	0f 92       	push	r0
  58:	11 24       	eor	r1, r1
  5a:	2f 93       	push	r18
  5c:	8f 93       	push	r24
  5e:	9f 93       	push	r25
    switch (direction) /* Note [3] */
  60:	80 91 60 00 	lds	r24, 0x0060
  64:	99 27       	eor	r25, r25
  66:	00 97       	sbiw	r24, 0x00	; 0
  68:	19 f0       	breq	.+6      	; 0x70
  6a:	01 97       	sbiw	r24, 0x01	; 1
  6c:	c1 f0       	breq	.+48     	; 0x9e
  6e:	29 c0       	rjmp	.+82     	; 0xc2
    {
        case UP:
            if (++pwm == 500)
  70:	80 91 61 00 	lds	r24, 0x0061
  74:	90 91 62 00 	lds	r25, 0x0062
  78:	01 96       	adiw	r24, 0x01	; 1
  7a:	90 93 62 00 	sts	0x0062, r25
  7e:	80 93 61 00 	sts	0x0061, r24
  82:	80 91 61 00 	lds	r24, 0x0061
  86:	90 91 62 00 	lds	r25, 0x0062
  8a:	84 5f       	subi	r24, 0xF4	; 244
  8c:	91 40       	sbci	r25, 0x01	; 1
  8e:	c9 f4       	brne	.+50     	; 0xc2
			{
                direction = DOWN;
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	80 93 60 00 	sts	0x0060, r24
				PORTB = ~PORTB;
  96:	88 b3       	in	r24, 0x18	; 24
  98:	80 95       	com	r24
  9a:	88 bb       	out	0x18, r24	; 24
			}
            break;
  9c:	12 c0       	rjmp	.+36     	; 0xc2

        case DOWN:
            if (--pwm == 50)
  9e:	80 91 61 00 	lds	r24, 0x0061
  a2:	90 91 62 00 	lds	r25, 0x0062
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	90 93 62 00 	sts	0x0062, r25
  ac:	80 93 61 00 	sts	0x0061, r24
  b0:	80 91 61 00 	lds	r24, 0x0061
  b4:	90 91 62 00 	lds	r25, 0x0062
  b8:	c2 97       	sbiw	r24, 0x32	; 50
  ba:	19 f4       	brne	.+6      	; 0xc2
			{
                direction = UP;
  bc:	10 92 60 00 	sts	0x0060, r1
				wdt_reset();
  c0:	a8 95       	wdr
			}
            break;
    }
	PORTD = ~PORTD;
  c2:	82 b3       	in	r24, 0x12	; 18
  c4:	80 95       	com	r24
  c6:	82 bb       	out	0x12, r24	; 18

    OCR = pwm; /* Note [4] */
  c8:	80 91 61 00 	lds	r24, 0x0061
  cc:	90 91 62 00 	lds	r25, 0x0062
  d0:	9b bd       	out	0x2b, r25	; 43
  d2:	8a bd       	out	0x2a, r24	; 42
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	2f 91       	pop	r18
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <ioinit>:
}

void
ioinit (void) /* Note [5] */
{
    /* tmr1 is 10-bit PWM */
    TCCR1A = /*_BV (PWM10) | _BV (PWM11) |*/ _BV (COM10);
  e4:	90 e4       	ldi	r25, 0x40	; 64
  e6:	9f bd       	out	0x2f, r25	; 47
	
    /* tmr1 running on full MCU clock */
    TCCR1B = _BV (CS11) | _BV(CTC1);
  e8:	8a e0       	ldi	r24, 0x0A	; 10
  ea:	8e bd       	out	0x2e, r24	; 46

    /* set PWM value to 0 */
    OCR = 0;
  ec:	1b bc       	out	0x2b, r1	; 43
  ee:	1a bc       	out	0x2a, r1	; 42

    /* enable OC1 and PB2 as output */
    DDROC = _BV (OC1);
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	87 bb       	out	0x17, r24	; 23

static __inline__ void timer_enable_int (unsigned char ints)
{
#ifdef TIMSK
    TIMSK = ints;
  f4:	99 bf       	out	0x39, r25	; 57

    timer_enable_int (_BV (OCIE1));

	PORTB = 0x01;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	88 bb       	out	0x18, r24	; 24
	DDRB = 0x01;
  fa:	87 bb       	out	0x17, r24	; 23
	PORTD = 0x01;
  fc:	82 bb       	out	0x12, r24	; 18
	DDRD = 0x03;
  fe:	83 e0       	ldi	r24, 0x03	; 3
 100:	81 bb       	out	0x11, r24	; 17

    /* enable interrupts */
    sei ();
 102:	78 94       	sei
 104:	08 95       	ret

00000106 <main>:
	
	
}


int
main (void)
{
 106:	cf ed       	ldi	r28, 0xDF	; 223
 108:	d0 e0       	ldi	r29, 0x00	; 0
 10a:	de bf       	out	0x3e, r29	; 62
 10c:	cd bf       	out	0x3d, r28	; 61
    ioinit ();
 10e:	ea df       	rcall	.-44     	; 0xe4

    /* loop forever, the interrupts are doing the rest */

	WDTCR = 0xf;
 110:	8f e0       	ldi	r24, 0x0F	; 15
 112:	81 bd       	out	0x21, r24	; 33

    for (;;) /* Note [6] */
 114:	ff cf       	rjmp	.-2      	; 0x114
